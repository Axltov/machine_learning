{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Programa 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ingresa una frase: Hola\n",
      "Hola al revés es aloH\n"
     ]
    }
   ],
   "source": [
    "frase = input(\"Ingresa una frase: \")    #Pide el string inicial\n",
    "for i in frase:                         #Inicia el ciclo for\n",
    "    invertido = i + invertido           #Establece una variable para invertir\n",
    "print(frase, \"al revés es\", invertido)  #Imprime el string inicial pero al revés\n",
    "invertido = \"\"                          #Borra/restablece el valor de la variable invertido"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Programa 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ingresa el valor binario: 101\n",
      "El número binario 101 equivale a 5 en decimal\n"
     ]
    }
   ],
   "source": [
    "binario = (input(\"Ingresa el valor binario: \"))      #Pide por un número en binario\n",
    "decimal = int(str(binario), 2)                       #Declara una nueva variable y asigna la anterior en base 2\n",
    "print(\"\"\"El número binario\"\"\", binario,              #Imprime el resultado\n",
    "      \"\"\"equivale a\"\"\", decimal, \"\"\"en decimal\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
